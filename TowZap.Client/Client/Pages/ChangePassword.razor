@page "/change-password"
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<h4 class="mb-4"><i class="fas fa-key me-2"></i> Change Password</h4>

<div class="card shadow-sm p-4">
    <EditForm Model="@model" OnValidSubmit="HandleChangePassword">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="mb-3">
            <label class="form-label">Current Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.CurrentPassword" />
            <ValidationMessage For="@(() => model.CurrentPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label">New Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.NewPassword" />
            <ValidationMessage For="@(() => model.NewPassword)" />
        </div>

        <div class="mb-3">
            <label class="form-label">Confirm New Password</label>
            <InputText type="password" class="form-control" @bind-Value="model.ConfirmPassword" />
            <ValidationMessage For="@(() => model.ConfirmPassword)" />
        </div>

        <button type="submit" class="btn btn-primary">
            <i class="fas fa-save me-2"></i> Update Password
        </button>
    </EditForm>
</div>

@code {
    private ChangePasswordModel model = new();

    private async Task HandleChangePassword()
    {
        if (model.NewPassword != model.ConfirmPassword)
        {
            await JS.InvokeVoidAsync("toast.error", "New password and confirm password do not match.");
            return;
        }

        var result = await AuthService.ChangePasswordAsync(new ChangePasswordDTO
            {
                CurrentPassword = model.CurrentPassword,
                NewPassword = model.NewPassword
            });

        if (result)
        {
            await JS.InvokeVoidAsync("toast.success", "Password changed successfully.");
            Navigation.NavigateTo("/");
        }
        else
        {
            await JS.InvokeVoidAsync("toast.error", "Failed to change password. Please try again.");
        }
    }

    public class ChangePasswordModel
    {
        [Required(ErrorMessage = "Current password is required")]
        public string CurrentPassword { get; set; }

        [Required(ErrorMessage = "New password is required")]
        [MinLength(6, ErrorMessage = "Password must be at least 6 characters long")]
        public string NewPassword { get; set; }

        [Required(ErrorMessage = "Please confirm your new password")]
        public string ConfirmPassword { get; set; }
    }
}
