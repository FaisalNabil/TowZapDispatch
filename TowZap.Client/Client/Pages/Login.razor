@page "/login"
@attribute [AllowAnonymous]
@inject TowZap.Client.Client.Service.IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject UserContext UserContext
@inject AuthenticationStateProvider AuthProvider


<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-md-4">
            <h3 class="text-center mb-4">Login</h3>
            <EditForm Model="@LoginModel" OnValidSubmit="LoginAsync">
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="mb-3">
                    <label class="form-label">Email</label>
                    <InputText class="form-control" @bind-Value="LoginModel.Email" />
                </div>

                <div class="mb-3">
                    <label class="form-label">Password</label>
                    <InputText type="password" class="form-control" @bind-Value="LoginModel.Password" />
                </div>

                <button type="submit" class="btn btn-primary w-100">Login</button>
            </EditForm>
        </div>
    </div>
</div>

@code {
    private LoginRequestDTO LoginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var role = user.FindFirst(ClaimTypes.Role)?.Value;

            var redirect = role switch
            {
                UserRoles.Administrator => "/admin/dashboard",
                UserRoles.CompanyAdministrator => "/admin/dashboard",
                UserRoles.Dispatcher => "/dispatcher/jobs",
                UserRoles.Driver => "/driver/myjob",
                UserRoles.GuestUser => "/guest/request",
                _ => "/"
            };

            Navigation.NavigateTo(redirect, forceLoad: true);
        }
    }

    private async Task LoginAsync()
    {
        try
        {
            var result = await AuthService.LoginAsync(LoginModel);
            await JS.InvokeVoidAsync("toast.success", "Login successful");

            // Notify the authentication system
            ((CustomAuthStateProvider)AuthProvider).NotifyUserAuthentication(result.Token);

            // Populate UserContext from JWT claims
            var handler = new JwtSecurityTokenHandler();
            var token = handler.ReadJwtToken(result.Token);
            var claims = token.Claims.ToList();

            UserContext.FullName = claims.FirstOrDefault(c => c.Type == "name")?.Value ?? "";
            UserContext.Role = claims.FirstOrDefault(c => c.Type == ClaimTypes.Role)?.Value ?? "";
            UserContext.CompanyId = Guid.TryParse(claims.FirstOrDefault(c => c.Type == "CompanyId")?.Value, out var cid)
                ? cid : Guid.Empty;

            // Redirect based on role
            var redirect = UserContext.Role switch
            {
                UserRoles.Administrator => "/admin/dashboard",
                UserRoles.CompanyAdministrator => "/admin/dashboard",
                UserRoles.Dispatcher => "/dispatcher/jobs",
                UserRoles.Driver => "/driver/myjob",
                UserRoles.GuestUser => "/guest/request",
                _ => "/"
            };

            Navigation.NavigateTo(redirect, forceLoad: true);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toast.error", ex.Message);
        }
    }

}
