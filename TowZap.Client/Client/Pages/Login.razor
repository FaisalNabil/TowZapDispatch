@page "/login"
@attribute [AllowAnonymous]
@inject IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject UserContext UserContext
@inject AuthenticationStateProvider AuthProvider

<EditForm Model="@LoginModel" OnValidSubmit="LoginAsync">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" @bind-Value="LoginModel.Email" placeholder="Email" />
    </div>
    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" type="password" @bind-Value="LoginModel.Password" placeholder="Password" />
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-primary btn-lg">Login</button>
    </div>

    <div class="mt-3 text-center">
        <small>Don't have an account? <a href="/register">Register</a></small>
    </div>
</EditForm>

@code {
    private LoginRequestDTO LoginModel = new();

    protected override async Task OnInitializedAsync()
    {
        var authState = await AuthProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity?.IsAuthenticated == true)
        {
            var role = user.FindFirst(ClaimTypes.Role)?.Value;

            var redirect = role switch
            {
                UserRoles.Administrator => "/admin/dashboard",
                UserRoles.CompanyAdministrator => "/admin/dashboard",
                UserRoles.Dispatcher => "/dispatcher/dashboard",
                UserRoles.Driver => "/driver/myjob",
                UserRoles.GuestUser => "/guest/request",
                _ => "/"
            };

            Navigation.NavigateTo(redirect, forceLoad: true);
        }
    }

    private async Task LoginAsync()
    {
        try
        {
            var result = await AuthService.LoginAsync(LoginModel);

            await JS.InvokeVoidAsync("toast.success", "Login successful");

            // Notify system — CustomAuthStateProvider will populate context
            ((CustomAuthStateProvider)AuthProvider).NotifyUserAuthentication(result.Token);

            // Wait for AuthStateProvider to populate context
            var authState = await AuthProvider.GetAuthenticationStateAsync();
            var user = authState.User;

            var role = user.FindFirst(ClaimTypes.Role)?.Value;

            var redirect = role switch
            {
                UserRoles.Administrator => "/admin/dashboard",
                UserRoles.CompanyAdministrator => "/admin/dashboard",
                UserRoles.Dispatcher => "/dispatcher/dashboard",
                UserRoles.Driver => "/driver/myjob",
                UserRoles.GuestUser => "/guest/request",
                _ => "/"
            };

            Navigation.NavigateTo(redirect, forceLoad: true);
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toast.error", ex.Message);
        }
    }


}
