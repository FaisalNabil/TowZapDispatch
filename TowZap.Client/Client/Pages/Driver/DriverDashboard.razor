@page "/driver/dashboard"
@inject HttpClient Http

<MudPaper Class="pa-4">
    <MudText Typo="Typo.h4" GutterBottom="true">Driver Dashboard</MudText>

    @if (_assignedJobs.Any())
    {
        @foreach (var job in _assignedJobs)
        {
            <MudCard Class="mb-4">
                <MudCardContent>
                    <MudText Typo="Typo.h6">Guest: @job.GuestName</MudText>
                    <MudText>From: @job.AddressFrom</MudText>
                    <MudText>To: @job.AddressTo</MudText>
                    <MudText>Vehicle: @job.Make @job.Model (@job.Color)</MudText>
                    <MudText>License Plate: @job.LicensePlate</MudText>
                    <MudText>Tow Fee: $@job.TowAmount</MudText>
                    <MudText>Status: @job.Status</MudText>

                    <MudSelect @bind-Value="_jobStatusUpdates[job.Id]" Label="Update Status" Dense="true">
                        <MudSelectItem Value="Enroute">Enroute</MudSelectItem>
                        <MudSelectItem Value="On-site">On-site</MudSelectItem>
                        <MudSelectItem Value="Towing">Towing</MudSelectItem>
                        <MudSelectItem Value="At Destination">At Destination</MudSelectItem>
                        <MudSelectItem Value="Complete">Complete</MudSelectItem>
                    </MudSelect>

                    <MudButton Color="Color.Primary" OnClick="@(() => UpdateJobStatus(job.Id))" Class="mt-2">
                        Submit Update
                    </MudButton>
                </MudCardContent>
            </MudCard>
        }
    }
    else
    {
        <MudText>No assigned jobs at the moment.</MudText>
    }
</MudPaper>

@code {
    private List<TowingRequestDTO> _assignedJobs = new();
    private Dictionary<string, string> _jobStatusUpdates = new();

    protected override async Task OnInitializedAsync()
    {
        _assignedJobs = await Http.GetFromJsonAsync<List<TowingRequestDTO>>("api/jobrequests/driver-assigned");

        foreach (var job in _assignedJobs)
        {
            _jobStatusUpdates[job.Id] = job.Status ?? "";
        }
    }

    private async Task UpdateJobStatus(string jobId)
    {
        if (_jobStatusUpdates.TryGetValue(jobId, out var newStatus) && !string.IsNullOrEmpty(newStatus))
        {
            var response = await Http.PostAsJsonAsync("api/jobrequests/update-status", new
            {
                JobRequestId = jobId,
                NewStatus = newStatus
            });

            if (response.IsSuccessStatusCode)
            {
                var job = _assignedJobs.FirstOrDefault(j => j.Id == jobId);
                if (job != null) job.Status = newStatus;
            }
        }
    }
}
