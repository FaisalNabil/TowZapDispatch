@page "/dispatcher/job/{JobId:guid}"
@inject IClientJobRequestService JobService
@inject NavigationManager Navigation
@inject IJSRuntime JS
@inject JobUpdateService JobUpdateService

<h3 class="mb-3"><i class="fas fa-clipboard-list"></i> Job Detail</h3>

@if (job == null || jobStatusOptions == null)
{
    <p>Loading job details...</p>
}
else
{
    <div class="mb-3">
        <button class="btn btn-secondary" @onclick="GoBack">
            <i class="fas fa-arrow-left"></i> Back to Jobs
        </button>
    </div>

    <div class="row">
        <!-- Left -->
        <div class="col-md-6">
            <div class="card p-3 mb-3">
                <h5><i class="fas fa-map-marked-alt"></i> Driver Location</h5>
                <MapComponent @ref="MapRef"
                              MapId="driverMap"
                              Latitude="@jobLat"
                              Longitude="@jobLng"
                              FromLatitude="@job.FromLatitude"
                              FromLongitude="@job.FromLongitude"
                              ToLatitude="@job.ToLatitude"
                              ToLongitude="@job.ToLongitude"
                              TowardSource="@ShouldNavigateToSource()" />

            </div>

            <div class="card p-3">
                <h5><i class="fas fa-route"></i> Job Status</h5>

                <JobStatusTimeline StatusHistory="@jobStatusHistory" />


                <div class="mt-3">
                    <label>Update Job Status</label>
                    <InputSelect class="form-select" @bind-Value="selectedStatus">
                        @foreach (var status in GetAllowedNextStatuses())
                        {
                            <option value="@status.Value">@status.Label</option>
                        }
                    </InputSelect>
                    <button class="btn btn-primary mt-2" @onclick="UpdateStatus">
                        <i class="fas fa-check-circle"></i> Update
                    </button>
                </div>
            </div>
        </div>

        <!-- Right -->
        <div class="col-md-6">
            <div class="card p-3">
                <h5><i class="fas fa-info-circle"></i> Job Info</h5>
                <p><strong>Caller:</strong> @job.CallerName (@job.CallerPhone)</p>
                <p><strong>Vehicle:</strong> @job.Make @job.Model - @job.PlateNumber</p>
                <p><strong>Reason:</strong> @job.Reason</p>
                <p><strong>From:</strong> @fromAddress</p>
                <p><strong>To:</strong> @toAddress</p>
                <p><strong>Tow Truck:</strong> @job.AssignedTowTruck</p>
                <p><strong>Created:</strong> @job.CreatedAt.ToString("g")</p>
            </div>
        </div>
    </div>
}

@code {
    [Parameter] public Guid JobId { get; set; }

    private JobResponseDTO job;
    private double jobLat = 23.8103;
    private double jobLng = 90.4125;

    private MapComponent MapRef;
    private List<MetaEnumDTO> jobStatusOptions = new();
    private List<DriverStatusHistoryItemDTO> jobStatusHistory = new();
    private string selectedStatus; 
    private string fromAddress = "Loading...";
    private string toAddress = "Loading...";

    private Dictionary<string, string> _geoCache = new();

    protected override async Task OnInitializedAsync()
    {
        job = await JobService.GetJobByIdAsync(JobId);
        jobStatusOptions = await JobService.GetJobStatusesAsync();

        selectedStatus = job.Status.ToString();

        jobStatusHistory = await JobService.GetJobStatusHistoryAsync(JobId);

        await ReverseGeocodeLocations();

        await JobUpdateService.StartConnectionAsync(JobId.ToString());

        JobUpdateService.OnJobUpdated += async (message) =>
        {
            var parts = message.Split(',');
            if (parts.Length == 2 &&
                double.TryParse(parts[0], out var lat) &&
                double.TryParse(parts[1], out var lng))
            {
                jobLat = lat;
                jobLng = lng;
                await MapRef.UpdateLocationAsync(lat, lng);
                StateHasChanged();
            }
        };
        JobUpdateService.OnLocationUpdated += async (lat, lng) =>
        {
            jobLat = lat;
            jobLng = lng;
            await MapRef.UpdateLocationAsync(lat, lng);
            StateHasChanged();
        };

    }

    private List<MetaEnumDTO> GetAllowedNextStatuses()
    {
        // You can enhance this logic based on domain rules
        var current = job.Status.ToString();
        var index = jobStatusOptions.FindIndex(s => s.Value == current);

        if (index == -1 || index == jobStatusOptions.Count - 1)
            return new List<MetaEnumDTO>();

        return jobStatusOptions.Skip(index + 1).ToList();
    }

    private async Task UpdateStatus()
    {
        if (Enum.TryParse<JobStatus>(selectedStatus, out var parsedStatus))
        {
            var result = await JobService.UpdateJobStatusAsync(JobId, parsedStatus);
            if (result)
            {
                job.Status = parsedStatus;

                // ✅ Reload the timeline history
                jobStatusHistory = await JobService.GetJobStatusHistoryAsync(JobId);

                await JS.InvokeVoidAsync("toast.success", "Status updated.");
            }
            else
            {
                await JS.InvokeVoidAsync("toast.error", "Failed to update status.");
            }

            StateHasChanged(); // ensure UI refresh
        }
        else
        {
            await JS.InvokeVoidAsync("toast.error", "Invalid status selected.");
        }
    }


    private async Task ReverseGeocodeLocations()
    {
        fromAddress = await GetAddressFromCoordinates(job.FromLatitude, job.FromLongitude);
        toAddress = await GetAddressFromCoordinates(job.ToLatitude, job.ToLongitude);
    }

    private async Task<string> GetAddressFromCoordinates(double lat, double lng)
    {
        var key = $"{lat:F5},{lng:F5}";

        if (_geoCache.TryGetValue(key, out var cached))
            return cached;

        try
        {
            using var httpClient = new HttpClient();
            var json = await httpClient.GetStringAsync(
                $"https://nominatim.openstreetmap.org/reverse?format=jsonv2&lat={lat}&lon={lng}");

            var data = JsonDocument.Parse(json);
            if (data.RootElement.TryGetProperty("display_name", out var displayName))
            {
                var address = displayName.GetString();
                _geoCache[key] = address!;
                return address;
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Reverse geocoding failed: {ex.Message}");
        }

        return key;
    }
    private bool ShouldNavigateToSource()
    {
        return job.Status is JobStatus.Pending or JobStatus.Assigned or JobStatus.EnRoute or JobStatus.Arrived;
    }



    private void GoBack() => Navigation.NavigateTo("/dispatcher/dashboard");
}
