@page "/dispatcher/assign"
@inject IJobRequestService JobRequestService
@inject IUserService UserService

<h3>Assign Tow Jobs</h3>

@if (jobs == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-bordered">
        <thead>
            <tr>
                <th>From</th>
                <th>To</th>
                <th>Driver</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)
            {
                <tr>
                    <td>@job.AddressFrom</td>
                    <td>@job.AddressTo</td>
                    <td>
                        <select @bind="@job.AssignedDriverId" class="form-select">
                            <option value="">-- Select Driver --</option>
                            @foreach (var driver in drivers)
                            {
                                <option value="@driver.Id">@driver.FullName</option>
                            }
                        </select>
                    </td>
                    <td>
                        <button class="btn btn-success" @onclick="@(() => AssignDriver(job.Id, job.AssignedDriverId))">Assign</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<JobRequestDTO> jobs;
    private List<UserDTO> drivers;

    protected override async Task OnInitializedAsync()
    {
        jobs = await JobRequestService.GetUnassignedJobsAsync();
        drivers = await UserService.GetAllDriversAsync();
    }

    private async Task AssignDriver(Guid jobId, string driverId)
    {
        await JobRequestService.AssignDriverAsync(jobId, driverId);
        jobs = await JobRequestService.GetUnassignedJobsAsync(); // refresh list
    }
}
