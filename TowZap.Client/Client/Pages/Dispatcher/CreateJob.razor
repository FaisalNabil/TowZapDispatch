@page "/dispatcher/job/create"
@inject IClientJobRequestService JobService
@inject IClientUserService UserService
@inject NavigationManager Navigation
@inject IJSRuntime JS

@attribute [Authorize(Roles = UserRoles.Dispatcher)]

<div class="container mt-5">
    <div class="row justify-content-center">
        <div class="col-lg-10 col-md-12">
            <div class="card shadow-lg">
                <div class="card-header bg-success text-white d-flex justify-content-between align-items-center">
                    <h5 class="mb-0"><i class="bi bi-truck-flatbed me-2"></i>Create Tow Job</h5>
                    <button class="btn btn-light btn-sm" @onclick="BackToDashboard">
                        <i class="bi bi-arrow-left"></i> Back
                    </button>
                </div>

                <div class="card-body">
                    <EditForm Model="@job" OnValidSubmit="CreateJobAsync">
                        <DataAnnotationsValidator />
                        <ValidationSummary />

                        <!-- Account Name -->
                        <div class="mb-3">
                            <label class="form-label">Account Name</label>
                            <InputText class="form-control" @bind-Value="job.AccountName" />
                        </div>
                        <!-- Caller Info -->
                        <h6 class="fw-bold mt-3">
                            <i class="bi bi-person-lines-fill me-2 text-secondary"></i>Caller Info
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Caller Name</label>
                                <InputText class="form-control" @bind-Value="job.CallerName" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Caller Phone</label>
                                <InputText class="form-control" @bind-Value="job.CallerPhone" />
                            </div>
                        </div>

                        <!-- Vehicle Info -->
                        <h6 class="fw-bold mt-4">
                            <i class="bi bi-car-front-fill me-2 text-secondary"></i>Vehicle Info
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">VIN</label>
                                <InputText class="form-control" @bind-Value="job.VIN" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label fw-bold">Keys <i class="bi bi-key ms-1"></i></label>

                                <InputRadioGroup @bind-Value=@job.Keys>
                                    @foreach (var key in new[] { true, false })
                                    {
                                        <div class="form-check form-check-inline">
                                            <InputRadio class="form-check-input" Value=@key />
                                            <label class="form-check-label">@key</label>
                                        </div>
                                    }
                                </InputRadioGroup>

                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Year</label>
                                <InputText class="form-control" @bind-Value="job.Year" />
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Unit #</label>
                                <InputText class="form-control" @bind-Value="job.UnitNumber" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Make</label>
                                <InputText class="form-control" @bind-Value="job.Make" />
                            </div>

                            <div class="col-md-6 mb-3">
                                <label class="form-label">Odometer</label>
                                <InputText class="form-control" @bind-Value="job.Odometer" />
                            </div>
                        </div>

                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Model</label>
                                <InputText class="form-control" @bind-Value="job.Model" />
                            </div>
                        </div>
                        <div class="row">
                            <div class="mb-3">
                                <label class="form-label fw-bold">Color</label>
                                <InputRadioGroup @bind-Value=@job.Color>
                                @foreach (var color in new[] { "Black", "White", "Silver", "Gold", "Other" })
                                {
                                    <div class="form-check form-check-inline">
                                        <InputRadio class="form-check-input" Value=@color />
                                        <label class="form-check-label">@color</label>
                                    </div>
                                    }
                                </InputRadioGroup>
                                @if (job.Color == "Other")
                                {
                                    <div class="mb-3 mt-2">
                                        <label class="form-label">Specify Color</label>
                                        <InputText class="form-control" @bind-Value="customColor" />
                                    </div>
                                }

                            </div>

                        </div>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Plate #</label>
                                <InputText class="form-control" @bind-Value="job.PlateNumber" />
                            </div>
                        </div>
                        <div class="row">

                            <div class="col-md-6 mb-3">
                                <label class="form-label">State Plate</label>
                                <InputSelect class="form-select" @bind-Value="job.StatePlate">
                                    <option value="">-- Select State --</option>
                                    @foreach (var state in USStates)
                                    {
                                        <option value="@state">@state</option>
                                    }
                                </InputSelect>
                            </div>
                        </div>


                        <!-- Tow Reason -->
                        <h6 class="fw-bold mt-4">
                            <i class="bi bi-exclamation-triangle-fill me-2 text-secondary"></i>Tow Reason
                        </h6>

                        <div class="mb-3">
                            <InputSelect class="form-select" @bind-Value="job.Reason" @onchange="OnTowReasonChanged">
                                <option value="">-- Select Reason --</option>
                                @foreach (var reason in TowReasons)
                                {
                                    <option value="@reason">@reason</option>
                                }
                                <option value="Other">Other</option>
                            </InputSelect>
                        </div>

                        @if (selectedReason == "Other")
                        {
                            <div class="mb-3">
                                <label class="form-label">Custom Reason</label>
                                <InputText class="form-control" @bind-Value="customReason" />
                            </div>
                        }


                        <h6 class="fw-bold mt-4">
                            <i class="bi bi-geo-alt-fill me-2 text-secondary"></i>Location Info
                        </h6>

                        <LocationPicker Label="From Location"
                                        MapId="fromMap"
                                        OnLocationSelected="FromLocationCallback" />

                        <LocationPicker Label="To Location"
                                        MapId="toMap"
                                        OnLocationSelected="ToLocationCallback" />





                        <!-- Assignment -->
                        <h6 class="fw-bold mt-4">
                            <i class="bi bi-person-badge-fill me-2 text-secondary"></i>Assign Driver
                        </h6>
                        <div class="row">
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Assign Driver</label>
                                <InputSelect class="form-select" @bind-Value="job.AssignedDriverId">
                                    <option value="">-- Select Driver --</option>
                                    @foreach (var driver in companyDrivers)
                                    {
                                        <option value="@driver.Id">@driver.FullName</option>
                                    }
                                </InputSelect>
                            </div>
                            <div class="col-md-6 mb-3">
                                <label class="form-label">Tow Truck</label>
                                <InputText class="form-control" @bind-Value="job.AssignedTowTruck" />
                            </div>
                        </div>


                        <!-- Submit -->
                        <div class="d-grid mt-4">
                            <button class="btn btn-success btn-lg" type="submit">
                                <i class="bi bi-check-circle me-1"></i> Submit Job
                            </button>
                        </div>
                    </EditForm>
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private CreateJobRequestDTO job = new();
    private string[] TowReasons = new[] { "Normal", "Accident", "Abandoned", "PPI", "Other" };
    private string selectedReason;
    private string customReason, customColor;
    private List<DriverDropdownDTO> companyDrivers = new();

    private EventCallback<LocationResult> FromLocationCallback => EventCallback.Factory.Create<LocationResult>(this, OnFromLocationSelected);
    private EventCallback<LocationResult> ToLocationCallback => EventCallback.Factory.Create<LocationResult>(this, OnToLocationSelected);


    protected override void OnInitialized()
    {
        selectedReason = job.Reason;
    }

    protected override async Task OnInitializedAsync()
    {
        companyDrivers = await UserService.GetDriversInCompanyAsync();
    }

    private void OnTowReasonChanged(ChangeEventArgs e)
    {
        selectedReason = e.Value?.ToString();

        if (selectedReason != "Other")
        {
            job.Reason = selectedReason;
        }
        else
        {
            job.Reason = string.Empty;
        }
    }

    private async Task CreateJobAsync()
    {
        if (selectedReason == "Other")
        {
            job.Reason = customReason;
        }
        if (job.Color == "Other")
        {
            job.Color = customColor;
        }

        var result = await JobService.CreateJobAsync(job);
        if (result)
        {
            await JS.InvokeVoidAsync("toast.success", "Job created successfully!");
            Navigation.NavigateTo("/dispatcher/dashboard");
        }
        else
        {
            await JS.InvokeVoidAsync("toast.error", "Failed to create job.");
        }
    }
    private readonly string[] USStates = new[]
    {
        "AL", "AK", "AZ", "AR", "CA", "CO", "CT", "DE", "FL", "GA",
        "HI", "ID", "IL", "IN", "IA", "KS", "KY", "LA", "ME", "MD",
        "MA", "MI", "MN", "MS", "MO", "MT", "NE", "NV", "NH", "NJ",
        "NM", "NY", "NC", "ND", "OH", "OK", "OR", "PA", "RI", "SC",
        "SD", "TN", "TX", "UT", "VT", "VA", "WA", "WV", "WI", "WY"
    };

    private void OnFromLocationSelected(LocationResult result)
    {
        job.FromLocation = result.Address;
        job.FromLatitude = result.Latitude;
        job.FromLongitude = result.Longitude;
    }

    private void OnToLocationSelected(LocationResult result)
    {
        job.ToLocation = result.Address;
        job.ToLatitude = result.Latitude;
        job.ToLongitude = result.Longitude;
    }




    private void BackToDashboard() => Navigation.NavigateTo("/dispatcher/dashboard");
}
