@page "/dispatcher/dashboard"
@inject IJobRequestService JobRequestService
@inject NavigationManager Navigation

<h3>Dispatcher Dashboard</h3>

<div class="d-flex justify-content-end mb-3">
    <button class="btn btn-primary" @onclick="CreateNewJob">Create New Job</button>
</div>

@if (jobs == null)
{
    <p>Loading...</p>
}
else if (!jobs.Any())
{
    <p>No jobs found.</p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Job ID</th>
                <th>Caller</th>
                <th>Vehicle</th>
                <th>Status</th>
                <th>Created At</th>
                <th>Action</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var job in jobs)
            {
                <tr>
                    <td>@job.Id</td>
                    <td>@job.CallerName</td>
                    <td>@job.Make @job.Model (@job.PlateNumber)</td>
                    <td>@job.Status</td>
                    <td>@job.CreatedAt.ToString("g")</td>
                    <td>
                        <button class="btn btn-sm btn-outline-info" @onclick="() => ViewDetails(job.Id)">View</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<JobResponseDTO> jobs;

    protected override async Task OnInitializedAsync()
    {
        jobs = await JobRequestService.GetJobsForDispatcherAsync();
    }

    private void CreateNewJob()
    {
        Navigation.NavigateTo("/dispatcher/job/create");
    }

    private void ViewDetails(int jobId)
    {
        Navigation.NavigateTo($"/dispatcher/job/{jobId}");
    }
}
