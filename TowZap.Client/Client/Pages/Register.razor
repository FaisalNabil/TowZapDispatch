@page "/register"
@inject TowZap.Client.Client.Service.IAuthService AuthService
@inject NavigationManager Navigation

@using Dispatch.Application.DTOs.Registration
@using System.ComponentModel.DataAnnotations

<EditForm Model="@registerModel" OnValidSubmit="@HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="container mt-5">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card shadow">
                    <div class="card-header bg-primary text-white text-center">
                        <h5 class="mb-0">Register (Guest)</h5>
                    </div>
                    <div class="card-body">
                        <div class="form-group mb-3">
                            <label>Full Name</label>
                            <InputText class="form-control" @bind-Value="registerModel.FullName" />
                        </div>
                        <div class="form-group mb-3">
                            <label>Email</label>
                            <InputText class="form-control" @bind-Value="registerModel.Email" />
                        </div>
                        <div class="form-group mb-3">
                            <label>Phone Number</label>
                            <InputText class="form-control" @bind-Value="registerModel.PhoneNumber" />
                        </div>
                        <div class="form-group mb-4">
                            <label>Password</label>
                            <InputText class="form-control" type="password" @bind-Value="registerModel.Password" />
                        </div>
                        <button type="submit" class="btn btn-primary w-100">Register</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</EditForm>

@code {
    private GuestRegistrationDTO registerModel = new() { CompanyId = Guid.Empty };

    private async Task HandleRegister()
    {
        try
        {
            var result = await AuthService.RegisterGuestAsync(registerModel);

            if (result)
            {
                await JS.InvokeVoidAsync("toastr.success", "Registration successful. Please login.");
                Navigation.NavigateTo("/login");
            }
            else
            {
                await JS.InvokeVoidAsync("toastr.error", "Registration failed.");
            }
        }
        catch (Exception ex)
        {
            await JS.InvokeVoidAsync("toastr.error", ex.Message);
        }
    }

    [Inject]
    private IJSRuntime JS { get; set; }
}
