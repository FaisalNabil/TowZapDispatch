@page "/register"
@layout PublicLayout
@inject TowZap.Client.Client.Service.IAuthService AuthService
@inject NavigationManager Navigation
@inject IJSRuntime JS

<EditForm Model="@registerModel" OnValidSubmit="HandleRegister">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" @bind-Value="registerModel.FullName" placeholder="Full Name" />
    </div>
    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" @bind-Value="registerModel.Email" placeholder="Email" />
    </div>
    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" @bind-Value="registerModel.PhoneNumber" placeholder="Phone" />
    </div>
    <div class="mb-3">
        <InputText class="form-control form-control-lg bg-light" type="password" @bind-Value="registerModel.Password" placeholder="Password" />
    </div>
    <div class="d-grid">
        <button type="submit" class="btn btn-success btn-lg">Register</button>
    </div>

    <div class="mt-3 text-center">
        <small>Already have an account? <a href="/login">Login</a></small>
    </div>
</EditForm>

@code {
    private GuestRegistrationDTO registerModel = new() { CompanyId = Guid.Empty };

    private async Task HandleRegister()
    {
        var result = await AuthService.RegisterGuestAsync(registerModel);
        if (result)
        {
            await JS.InvokeVoidAsync("toast.success", "Registration successful!");
            Navigation.NavigateTo("/login");
        }
        else
        {
            await JS.InvokeVoidAsync("toast.error", "Registration failed.");
        }
    }
}
